Type '{ name: string; label: string; ui: { previewSrc: string; defaultItem: { items: { title: string; text: string; icon: { color: string; style: string; name: string;
                };
            }[];
        };
    }; fields: ({ type: string; label: string; ... 4 more ...; options?: undefined;
    } | { ...;
    })[];
}' is not assignable to type '{ label?: string | boolean; name: string; nameOverride?: string; ui?: { itemProps?(item: Record<string, any>): { key?: string; label?: string | boolean;
        }; defaultItem?: DefaultItem<Record<string, any>>; previewSrc?: string;
    }; fields: Field<...>[];
}'.
  Types of property 'fields' are incompatible.
    Type '({ type: string; label: string; name: string; list: boolean; ui: { itemProps: (item: any) => { label: any;
        }; defaultItem: { title: string; text: string; icon: { color: string; style: string; name: string;
            };
        };
    }; fields: ({ ...;
    } | ... 1 more ... | { ...;
    })[]; options?: undefined;
} | { ...;
})[]' is not assignable to type 'Field<false>[]'.
      Type '{ type: string; label: string; name: string; list: boolean; ui: { itemProps: (item: any) => { label: any;
        }; defaultItem: { title: string; text: string; icon: { color: string; style: string; name: string;
            };
        };
    }; fields: ({ ...;
    } | ... 1 more ... | { ...;
    })[]; options?: undefined;
} | { ...;
}' is not assignable to type 'Field<false>'.
        Type '{ type: string; label: string; name: string; list: boolean; ui: { itemProps: (item: any) => { label: any;
        }; defaultItem: { title: string; text: string; icon: { color: string; style: string; name: string;
            };
        };
    }; fields: ({ ...;
    } | ... 1 more ... | { ...;
    })[]; options?: undefined;
}' is not assignable to type 'Field<false>'.
          Type '{ type: string; label: string; name: string; list: boolean; ui: { itemProps: (item: any) => { label: any;
        }; defaultItem: { title: string; text: string; icon: { color: string; style: string; name: string;
            };
        };
    }; fields: ({ ...;
    } | ... 1 more ... | { ...;
    })[]; options?: undefined;
}' is not assignable to type '{ list?: false; ui?: UIField<string, false> & ObjectUiProps;
} & BaseField & { type: "object"; fields?: undefined; templates: { label?: string | boolean; name: string; nameOverride?: string; ui?: { ...;
        }; fields: Field<...>[];
    }[]; templateKey?: string;
}'.
            Type '{ type: string; label: string; name: string; list: boolean; ui: { itemProps: (item: any) => { label: any;
        }; defaultItem: { title: string; text: string; icon: { color: string; style: string; name: string;
            };
        };
    }; fields: ({ ...;
    } | ... 1 more ... | { ...;
    })[]; options?: undefined;
}' is not assignable to type '{ list?: false; ui?: UIField<string, false> & ObjectUiProps;
}'.
             // Types of property 'list' are incompatible.
//   Type 'boolean' is not assignable to type 'false'.ts(2322)
(alias) const eventBlockSchema: {
    name: string;
    label: string;
    ui: {
        previewSrc: string;
        defaultItem: {
            items: {
                title: string;
                text: string;
                icon: {
                    color: string;
                    style: string;
                    name: string;
                };
            }[];
        };
    };
    fields: ({
        type: string;
        label: string;
        ... 4 more ...;
        options?: undefined;
    } | {
        ...;
    })[];
}
import eventBlockSchema